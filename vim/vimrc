" Vim-Plug: Plugin Manager {{{
call plug#begin('~/.vim/plugged')
" color schemes
Plug 'altercation/vim-colors-solarized'
Plug 'crusoexia/vim-monokai'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'mhartington/oceanic-next'
" plugins
Plug 'airblade/vim-gitgutter'
Plug 'bitc/vim-hdevtools'
Plug 'cespare/vim-toml'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'edkolev/tmuxline.vim'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'jelera/vim-javascript-syntax'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'mileszs/ack.vim'
Plug 'neovimhaskell/haskell-vim'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'pangloss/vim-javascript'
Plug 'racer-rust/vim-racer'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'sjl/gundo.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vimwiki/vimwiki'
Plug 'wakatime/vim-wakatime'
Plug 'w0rp/ale'
call plug#end()

" :PlugInstall to install plugins
" :PlugUpdate to update plugins

" }}}
" Color Scheme {{{
syntax enable

set background=dark
set t_Co=256              " set terminal to 256 colors

silent! colorscheme OceanicNext

" Available color schemes:
"   - OceanicNext,        OceanicNextLight
"   - hybrid_material,    hybrid_reverse
"   - monokai
"   - solarized

" }}}
" Tabs {{{
set tabstop=2             " number of spaces per tab
set softtabstop=2         " number of spaces in tab when editing
set shiftwidth=2          " number of spaces indented with >> and <<
set expandtab             " convert tabs to spaces
set autoindent            " automatically indent new lines

" }}}
" Editor visual settings {{{
set number                " show line numbers
set cursorline            " highlight current line
set showmatch             " highlight matching parenthesis
set showcmd               " show command in bottom bar
set wildmenu              " visual autocomplete for command menu

set modelines=1           " allow a modeline at end of file

let &colorcolumn="81,101" " highlight columns 81 and 101

" }}}
" Folding {{{
set foldenable            " enable code block folding
set foldlevelstart=10     " open most folds by default
set foldnestmax=10        " 10 nested folds max
set foldmethod=indent     " fold based on indent level

" toggle folding
nnoremap <space> za

" }}}
" Searching {{{
set incsearch             " show search matches as you type
set hlsearch              " Highlight search matches

" clear the search highlight
nnoremap <leader>/ :nohlsearch<CR>

" }}}
" Auto Paste {{{
" automatic autoindent toggle-off-on for pasting text
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

" }}}
" Functionality {{{
set hidden                " hide buffers instead of closing them
set nobackup              " disable vim backup file
set noswapfile            " disable vim swap file
set nocompatible          " disable vi compatibility

filetype plugin on
syntax on

set mouse-=a              " disable visual mouse mode

set history=1000          " remember more commands and search history
set undolevels=1000       " we must go deeper

set tw=100                " set auto-textwidth to 100

let g:netrw_dirhistmax=0  " disable netrw history file

let mapleader=","         " change the mapleader from \ to ,

" make commands more accessible
nnoremap ; :

nnoremap J <C-e>
nnoremap K <C-y>

" quickly edit the vimrc / config.fish files
nmap <leader>ev :vsp $MYVIMRC<CR>
nmap <leader>ef :vsp ~/.config/fish/config.fish<CR>
" quickly source the vimrc file
nmap <leader>sv :source $MYVIMRC<CR>

" add command w!! to post-sudo
cmap w!! w !sudo tee % >/dev/null

" }}}
" Ack {{{
let g:ackprg = 'rg --no-heading --column'

" shortcut for using Ack
nnoremap <leader>a :Ack<space>

" }}}
" Airline {{{
set laststatus=2          " always show the status bar
set noshowmode            " disable vim's native mode indicator

" show airline for tabs too
let g:airline_theme='base16_monokai'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" }}}
" Ale {{{
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_sign_column_always = 1

highlight ALEError cterm=undercurl ctermfg=Red
highlight ALEWarning cterm=undercurl ctermfg=DarkCyan
highlight ALEStyleError cterm=undercurl ctermfg=Red
highlight ALEStyleWarning cterm=undercurl ctermfg=DarkCyan

let g:airline#extensions#ale#enabled = 1
let g:ale_sign_column_always = 1

let g:ale_linters = {
\ 'jsx': ['stylelint', 'eslint'],
\ 'go': ['gometalinter'],
\ 'haskell': ['hlint', 'hdevtools'],
\}
let g:ale_linter_aliases = { 'jsx': 'css' }
let g:ale_pattern_options = {
\ '\.min\.css$': { 'ale_linters': [], 'ale_fixers': [] },
\ '\.min\.js$': { 'ale_linters': [], 'ale_fixers': [] },
\ '\.cjs\.js$': { 'ale_linters': [], 'ale_fixers': [] },
\ '\.esm\.js$': { 'ale_linters': [], 'ale_fixers': [] },
\}

let g:ale_fixers = {
\ 'javascript': ['eslint'],
\ 'go': ['gofmt'],
\ 'haskell': ['brittany'],
\ 'rust': ['rustfmt'],
\}
let g:ale_fix_on_save = 1

" }}}
" BufferGator {{{
" open to right side
let g:buffergator_viewport_split_policy = 'R'

" use my own keymappings
let g:buffergator_suppress_keymaps = 1

" open new buffer
nmap <leader>T :enew<cr>

" switch to prev buffer
nmap <leader>h :BuffergatorMruCyclePrev<cr>

" switch to next buffer
nmap <leader>l :BuffergatorMruCycleNext<cr>

" list open buffers
nmap <leader>bl :BuffergatorOpen<cr>

" close current buffer and switch to previous
nmap <leader>bq :bp <BAR> bd #<cr>

" }}}
" CtrlP {{{
" order matches top-to-bottom
let g:ctrlp_match_window = 'bottom,order:ttb'
" open files in a new buffer
let g:ctrlp_switch_buffer = 0
" allow working directory change with CtrlP
let g:ctrlp_working_path_mode = 0
" use Ag for fast file searching
let g:ctrlp_user_command = 'ag %s -l --path-to-ignore ".gitignore" --ignore-dir "node_modules" --ignore-dir ".git" --nocolor --hidden -g ""'

" to ignore files / directories for searching,
" define a .agignore file

" }}}
" Deoplete {{{
let g:deoplete#enable_at_startup = 1

" tab complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" }}}
" Gundo {{{
let g:gundo_preview_height=25
let g:gundo_right=1

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

" }}}
" Haskell Vim {{{
let g:haskell_indent_case_alternative = 1
" }}}
" Javascript Libraries Syntax {{{
let g:used_javascript_libs = 'underscore,react'

" }}}
" NERDCommenter {{{
" comment entire selected line in visual mode
let g:NERDCommentWholeLinesInVMode = 1
" align comment delimiters flush to the left
let g:NERDDefaultAlign = 'left'
" insert space after comment delimiter
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1

" }}}
" NERDTree {{{
" open NERDTree with <leader>t
nmap <silent><leader>t :NERDTreeTabsToggle<CR>

" }}}
" VimWiki {{{
highlight VimwikiHeader1 ctermfg=10
highlight VimwikiHeader2 ctermfg=9
highlight VimwikiHeader3 ctermfg=3

let g:vimwiki_auto_chdir = 1

let g:vimwiki_list = [{
      \'path': '~/Documents/Notebook/',
      \'diary_header': "Logs",
      \'auto_diary_index': 1,
\}]
" }}}
" vim:foldmethod=marker:foldlevel=0
