" Vim-Plug: Plugin Manager {{{
" Download Vim-Plug if not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" color schemes
Plug 'mhartington/oceanic-next'
" Plug 'altercation/vim-colors-solarized'
" Plug 'crusoexia/vim-monokai'
" Plug 'kristijanhusak/vim-hybrid-material'

" plugins
Plug 'airblade/vim-gitgutter'
Plug 'cespare/vim-toml'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'edkolev/tmuxline.vim'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'jelera/vim-javascript-syntax'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'mileszs/ack.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neovimhaskell/haskell-vim'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'pangloss/vim-javascript'
Plug 'racer-rust/vim-racer'
Plug 'ron-rs/ron.vim'
Plug 'rust-lang/rust.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vimwiki/vimwiki'
Plug 'w0rp/ale'

" New / Trialing
Plug 'preservim/tagbar'
Plug 'universal-ctags/ctags'


call plug#end()

" Install plugins:
" :PlugInstall
"
" Update plugins:
" :PlugUpdate
"
" Install rust-analyzer for CoC
" ::CocInstall coc-rust-analyzer

" }}}
" Color Scheme {{{
syntax enable

set background=dark
set t_Co=256              " set terminal to 256 colors

silent! colorscheme OceanicNext

" Available color schemes:
"   - OceanicNext,        OceanicNextLight
"   - hybrid_material,    hybrid_reverse
"   - monokai
"   - solarized

" }}}
" Tabs {{{
set tabstop=2             " number of spaces per tab
set softtabstop=2         " number of spaces in tab when editing
set shiftwidth=2          " number of spaces indented with >> and <<
set expandtab             " convert tabs to spaces
set autoindent            " automatically indent new lines

" }}}
" Editor visual settings {{{
set number                " show line numbers
set cursorline            " highlight current line
set showmatch             " highlight matching parenthesis
set showcmd               " show command in bottom bar
set wildmenu              " visual autocomplete for command menu

set modelines=1           " allow a modeline at end of file

let &colorcolumn="81,101" " highlight columns 81 and 101

" }}}
" Folding {{{
set foldenable            " enable code block folding
set foldlevelstart=10     " open most folds by default
set foldnestmax=10        " 10 nested folds max
set foldmethod=indent     " fold based on indent level

" toggle folding
nnoremap <space> za

" }}}
" Searching {{{
set incsearch             " show search matches as you type
set hlsearch              " Highlight search matches

" clear the search highlight
nnoremap <leader>/ :nohlsearch<CR>

" }}}
" Auto Paste {{{
" automatic autoindent toggle-off-on for pasting text
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

" }}}
" Functionality {{{
set hidden                " hide buffers instead of closing them
set nobackup              " disable vim backup file
set nowritebackup         " disable vim writing to backup file
set noswapfile            " disable vim swap file
set nocompatible          " disable vi compatibility

" give more space for displaying messages
set cmdheight=2

" shorter updatetimes leads to less delays
set updatetime=300

filetype plugin on
syntax on

set mouse-=a              " disable visual mouse mode

set history=1000          " remember more commands and search history
set undolevels=1000       " we must go deeper

set tw=100                " set auto-textwidth to 100

let g:netrw_dirhistmax=0  " disable netrw history file

let mapleader=","         " change the mapleader from \ to ,

" make commands more accessible
nnoremap ; :

nnoremap J <C-e>
nnoremap K <C-y>

" make split navigaion easier
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" quickly edit the vimrc / config.fish files
nmap <leader>ev :vsp $MYVIMRC<CR>
nmap <leader>ef :vsp ~/.config/fish/config.fish<CR>
" quickly source the vimrc file
nmap <leader>sv :source $MYVIMRC<CR>

" add command w!! to post-sudo
cmap w!! w !sudo tee % >/dev/null

" }}}
" Ack {{{
let g:ackprg = 'rg --no-heading --column'

" shortcut for using Ack
nnoremap <leader>a :Ack<space>

" }}}
" Airline {{{
set laststatus=2          " always show the status bar
set noshowmode            " disable vim's native mode indicator

" show airline for tabs too
let g:airline_theme='base16_monokai'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" }}}
" Ale {{{
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_sign_column_always = 1

highlight ALEError cterm=undercurl ctermfg=Red
highlight ALEWarning cterm=undercurl ctermfg=DarkCyan
highlight ALEStyleError cterm=undercurl ctermfg=Red
highlight ALEStyleWarning cterm=undercurl ctermfg=DarkCyan

let g:airline#extensions#ale#enabled = 1
let g:ale_sign_column_always = 1

let g:ale_linters = {
\ 'jsx': ['stylelint', 'eslint'],
\ 'go': ['gometalinter'],
\ 'haskell': ['hlint', 'hdevtools'],
\ 'rust': ['cargo', 'analyzer'],
\}
let g:ale_linter_aliases = { 'jsx': 'css' }
let g:ale_pattern_options = {
\ '\.min\.css$': { 'ale_linters': [], 'ale_fixers': [] },
\ '\.min\.js$': { 'ale_linters': [], 'ale_fixers': [] },
\ '\.cjs\.js$': { 'ale_linters': [], 'ale_fixers': [] },
\ '\.esm\.js$': { 'ale_linters': [], 'ale_fixers': [] },
\}

let g:ale_fixers = {
\ 'javascript': ['eslint'],
\ 'go': ['gofmt'],
\ 'haskell': ['brittany'],
\ 'rust': ['rustfmt'],
\}
let g:ale_fix_on_save = 1

" }}}
" BufferGator {{{
" open to right side
let g:buffergator_viewport_split_policy = 'R'

" use my own keymappings
let g:buffergator_suppress_keymaps = 1

" open new buffer
nmap <leader>T :enew<cr>

" switch to prev buffer
nmap <leader>h :BuffergatorMruCyclePrev<cr>

" switch to next buffer
nmap <leader>l :BuffergatorMruCycleNext<cr>

" list open buffers
nmap <leader>bl :BuffergatorOpen<cr>

" close current buffer and switch to previous
nmap <leader>bq :bp <BAR> bd #<cr>

" }}}
" {{{ CoC
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for custom completion window
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"
" remap for complete to use tab and <cr>
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()

hi CocSearch ctermfg=12 guifg=#18A3FF
hi CocMenuSel ctermbg=109 guibg=#13354A

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('I', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" }}}
" CtrlP {{{
" order matches top-to-bottom
let g:ctrlp_match_window = 'bottom,order:ttb'
" open files in a new buffer
let g:ctrlp_switch_buffer = 0
" allow working directory change with CtrlP
let g:ctrlp_working_path_mode = 0
" use Ag for fast file searching
let g:ctrlp_user_command = 'ag %s -l --path-to-ignore ".gitignore" --ignore-dir "node_modules" --ignore-dir ".git" --nocolor --hidden -g ""'

" to ignore files / directories for searching,
" define a .agignore file

" }}}
" Haskell Vim {{{
let g:haskell_indent_case_alternative = 1
" }}}
" Javascript Libraries Syntax {{{
let g:used_javascript_libs = 'underscore,react'

" }}}
" NERDCommenter {{{
" comment entire selected line in visual mode
let g:NERDCommentWholeLinesInVMode = 1
" align comment delimiters flush to the left
let g:NERDDefaultAlign = 'left'
" insert space after comment delimiter
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1

" }}}
" NERDTree {{{
" open NERDTree with <leader>t
nmap <silent><leader>t :NERDTreeTabsToggle<CR>

" }}}
" Racer {{{
" Hidden mode for buffers
set hidden

" Show complete function definition (Experimental)
let g:racer_experimental_completer = 1

" Insert parenthesis in the completion
let g:racer_insert_paren = 1

" Mappings to open definition in buffer, pane, tab, or doc
augroup Racer
    autocmd!
    autocmd FileType rust nmap <buffer> gd         <Plug>(rust-def)
    autocmd FileType rust nmap <buffer> gs         <Plug>(rust-def-split)
    autocmd FileType rust nmap <buffer> gx         <Plug>(rust-def-vertical)
    autocmd FileType rust nmap <buffer> gt         <Plug>(rust-def-tab)
    autocmd FileType rust nmap <buffer> <leader>gd <Plug>(rust-doc)
    autocmd FileType rust nmap <buffer> <leader>gD <Plug>(rust-doc-tab)
augroup END
" }}}
" VimWiki {{{
highlight VimwikiHeader1 ctermfg=10
highlight VimwikiHeader2 ctermfg=9
highlight VimwikiHeader3 ctermfg=3

let g:vimwiki_auto_chdir = 1

let g:vimwiki_list = [{
      \'path': '~/documents/vimwiki/',
      \'diary_header': "Logs",
      \'auto_diary_index': 1,
\}]
" }}}
" vim:foldmethod=marker:foldlevel=0
